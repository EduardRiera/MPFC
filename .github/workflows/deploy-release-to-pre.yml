name: deploy-release-to-pre
run-name: Deploy ${{github.ref_name}} to PRE by @${{ github.actor }}
#   deploy the published release to PRE D365 environment

on:
  release:
      types: [published]
    
permissions:
  contents: write
  security-events: write  
  
jobs:
  update-release-notes:
    runs-on: windows-latest
    environment: PRE        

    steps:
    - name: checkout action
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        lfs: true

    - name: download-pac-cli
      if: false
      uses: microsoft/powerplatform-actions/who-am-i@v0

    - name: set-pac-cli-path
      shell: pwsh
      run: |
        Set-Location "..\..\_actions\microsoft\powerplatform-actions\v0\dist\pac\tools"
        (Get-Location).Path | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append        

    - name: check-solution
      id: check-solution
      uses: microsoft/powerplatform-actions/check-solution@v0
      if: ${{vars.FLAGS_CHECK == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        path: "${{vars.SOLUTION_EXPORTED_FOLDER}}/${{vars.SOLUTION_NAME}}.zip"
        geo: "Europe"
        checker-logs-artifact-name: check-solution-log
        fail-on-analysis-error: false

    - name: download-log
      uses: actions/download-artifact@v3
      if: ${{vars.FLAGS_CHECK == 1}}
      with:
        name: check-solution-log
        path: check-solution-log

    - name: set-qualityresults
      if: ${{vars.FLAGS_CHECK == 1}}
      run: |
        $sarif = Get-ChildItem -Path "check-solution-log" -Filter "*.sarif" -Recurse | Select-Object -First 1

        #fitxer auxiliar per tenir les alertes agrupades per gravetat, nivell i norma
        $sarif | Get-Content | jq "[.runs[0].results | group_by(.ruleId)[] | group_by(.level)[] | group_by(.properties.severity)[] | {Key: .[0].ruleId, Level: .[0].level, Severity: .[0].properties.severity, Count: length}]" | Out-File -Encoding ascii results.json
        #fitxer auxiliar per tenir la categoria de cada norma
        $sarif | Get-Content | jq "[.runs[0].tool.driver.rules | group_by(.id)[] | group_by(.properties.primaryCategory)[] | {Key: .[0].id, Category: .[0].properties.primaryCategory}]" | Out-File -Encoding ascii rules.json
        #fitxer auxiliar amb el join entre els dos fitxers eliminant els que no tenen alertes 
        jq -s '[.[0] + .[1] | group_by(.Key)[] | {Key: .[0].Key , Severity: .[0].Severity, Level: .[0].Level,  Category: .[1].Category, Count: .[0].Count }] | map(select(.Count != null))' results.json rules.json | Out-File -Encoding ascii joined.json
        
        #table es un array de arrays representant les dades de la taula ordenades i agrupades per gravetat, nivell i categoria
        $table = jq "[group_by(.Severity)[] | group_by(.Level)[] | group_by(.Category)[] | [.[0].Severity, .[0].Level,  .[0].Category, (map(.Count) | add)]] | sort_by(.[0], .[1] , -.[3])" joined.json | ConvertFrom-Json

        #enviem la taula en format markdown en la variable qualityresults
        echo 'qualityresults<<EOF' >> $env:GITHUB_ENV
        echo 'Gravetat|Nivell|Categoria|Alertes' >> $env:GITHUB_ENV
        echo '---|---|---|---' >> $env:GITHUB_ENV
        $table | ForEach-Object {$_ -join '|' >> $env:GITHUB_ENV }
        echo 'EOF' >> $env:GITHUB_ENV

    - name: upload-sariftogithub
      uses: github/codeql-action/upload-sarif@v2
      if: ${{vars.FLAGS_CHECK == 1}}
      with:
        # Path to SARIF file relative to the root of the repository
        sarif_file: check-solution-log
        ref: refs/heads/main
        sha: ${{github.sha}}

    - name: set-plugin-report
      if: ${{vars.FLAGS_CHECK == 1}}
      run: |
         #ens connectem a preproduccio    
         pac auth create -u ${{vars.ENVIRONMENT_URL}} -id ${{vars.CLIENT_ID}} -cs ${{secrets.CLIENT_SECRET}} -t ${{vars.TENANT_ID}}

         #enviem la taula en format markdown en la variable pluginreport
         echo 'pluginreport<<EOF' >> $env:GITHUB_ENV
         echo 'Fichero | Nombre | Version | PRE | PRO' >> $env:GITHUB_ENV
         echo '--- | --- | --- | --- | ---' >> $env:GITHUB_ENV
         #A cada dll de PluginAssemblies la anotem i la busquem al entorn de preproduccio
         (Get-ChildItem -Path "${{vars.SOLUTION_DETAIL_FOLDER}}/${{vars.SOLUTION_NAME}}/PluginAssemblies" -Recurse -Filter *.dll | 
            ForEach-Object {
              #Obtenim la dll
              $dll = Get-ItemProperty -Path $_.FullName -Name VersionInfo
              $fetchXML = @"
              <fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false">
                 <entity name="pluginassembly">
                 <attribute name="name" />
                 <attribute name="version" />
                 <filter type="and">
                     <condition attribute="name" operator="eq" value="$dll.VersionInfo.FileDescription" />
                 </filter>
                 </entity>
              </fetch>
              "@
              $orgversion = pac org fetch --xml ($fetchXML -replace "`n", "") | Select-Object -Skip 4 | ConvertFrom-String -PropertyNames name, version
              echo "$_.Name|$dll.VersionInfo.FileDescription|$dll.VersionInfo.FileVersion|$orgversion.version|(pending)"  >> $env:GITHUB_ENV
            })
         echo 'EOF' >> $env:GITHUB_ENV

    - name: create-release-notes
      env:
        GH_TOKEN: ${{ github.token }}      
      run: |
         $markdown = @"
         # Release ${{github.ref_name}}

         ## Included Plugins
         ${{env.pluginreport}}

         ## Quality (alertes):
         ${{env.qualityresults}}
         "@

         gh release edit ${{github.ref_name}} --notes "$markdown"

  deploy-release-to-pre:
    runs-on: windows-latest
    needs: [update-release-notes]
    environment: PRE        

    steps:
    - name: checkout action
      uses: actions/checkout@v3
      with:
        lfs: true

    - name: backup-environment action
      uses: microsoft/powerplatform-actions/backup-environment@v0
      if: ${{vars.FLAGS_BACKUP == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        user-name: ${{ secrets.USER }}
        password-secret: ${{ secrets.PASSWORD }}
        #app-id: ${{vars.CLIENT_ID}}
        #client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        backup-label: 'Before deploying ${{github.ref_name}}'

    - name: import-managed-solution action
      uses: microsoft/powerplatform-actions/import-solution@v0
      if: ${{vars.FLAGS_SOLUTION == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        solution-file: ${{vars.SOLUTION_NAME}}
        force-overwrite: true
        publish-changes: true

    - name: upload-paportal action
      uses: microsoft/powerplatform-actions/upload-paportal@v0
      if: ${{vars.FLAGS_PORTAL == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        upload-path: ${{vars.PORTAL_PATH}}
        deployment-profile: pre

    - name: import-data
      uses: microsoft/powerplatform-actions/import-data@v0
      if: ${{vars.FLAGS_DATA == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        app-id: ${{vars.CLIENT_ID}}
        client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        data-file: "Data/Content/"
        verbose: true

    - name: backup-environment action
      uses: microsoft/powerplatform-actions/backup-environment@v0
      if: ${{vars.FLAGS_BACKUP == 1}}
      with:
        environment-url: ${{vars.ENVIRONMENT_URL}}
        user-name: ${{ secrets.USER }}
        password-secret: ${{ secrets.PASSWORD }}
        #app-id: ${{vars.CLIENT_ID}}
        #client-secret: ${{ secrets.CLIENT_SECRET }}
        tenant-id: ${{vars.TENANT_ID}}
        backup-label: 'After deploying ${{github.ref_name}}'

    - name: generate-pre-tag action
      run: echo "pre-tag=PRE-$(date +%Y%m%d%H%M%S)" >> $env:GITHUB_ENV

    - name: set-pre-tag action  
      run: |
        git tag ${{env.pre-tag}}
        git push origin ${{env.pre-tag}}

    - name: update-release-notes
      shell: powershell
      env:
        GH_TOKEN: ${{ github.token }}      
      run: |
         $previousmarkdown = (gh release view ${{github.ref_name}} --json body --jq ".body") -join "`n"
         
         $markdown = @"
         $previousmarkdown
         
         Installed on ${{env.pre-tag}} with (Backup=${{vars.FLAGS_BACKUP}}, Solution=${{vars.FLAGS_SOLUTION}}, Portal=${{vars.FLAGS_PORTAL}}, Data=${{vars.FLAGS_DATA}}) by [run ${{github.run_id}}](https://github.com/${{github.repository}}/actions/runs/${{github.run_id}})
         "@
         
         gh release edit ${{github.ref_name}} --notes "$markdown"
         
